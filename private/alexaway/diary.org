
* 2016
** 2016-11 November
*** 2016-11-24 Thursday
**** 今天应该是一个阳光明媚的一天，我在实验室里编代码，好悲伤 
     :LOGBOOK:
     CLOCK: [2016-11-24 Thu 16:25]--[2016-11-24 Thu 16:26] =>  0:01
     :END:
     [2016-11-24 Thu 16:25]
**** What the fuck 这尼玛都是什么啊啊啊啊啊 
     :LOGBOOK:
     CLOCK: [2016-11-24 Thu 17:13]--[2016-11-24 Thu 17:15] =>  0:02
     :END:
     [2016-11-24 Thu 17:13]
**** 我们去看一场电影吧，你说呢 
     [2016-11-24 Thu 17:52]
**** 滕王阁序 
     豫章故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。
     时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿。临帝子之长洲，得仙人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，列冈峦之体势。
     披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。闾阎扑地，钟鸣鼎食之家；舸舰迷津，青雀黄龙之舳。云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡之滨，雁阵惊寒，声断衡阳之浦。
     遥吟俯畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。四美具，二难并。穷睇眄于中天，极娱游于暇日。天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会于云间。地势极而南溟深，天柱高而北辰远。关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。怀帝阍而不见，奉宣室以何年？
     嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子安贫，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！
     勃，三尺微命，一介书生。无路请缨，等终军之弱冠；有怀投笔，慕宗悫之长风。舍簪笏于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨陪鲤对；今兹捧袂，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？
     呜乎！胜地不常，盛筵难再；兰亭已矣，梓泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔：
     滕王高阁临江渚，佩玉鸣鸾罢歌舞。
     画栋朝飞南浦云，珠帘暮卷西山雨。
     闲云潭影日悠悠，物换星移几度秋。
     阁中帝子今何在？槛外长江空自流。
     :LOGBOOK:
     CLOCK: [2016-11-24 Thu 17:54]--[2016-11-24 Thu 17:55] =>  0:01
     :END:
     [2016-11-24 Thu 17:54]
**** 现在总算把org-mode 初步的配置了一下，革命尚未成功，同志仍需努力啊 
     :LOGBOOK:
     CLOCK: [2016-11-24 Thu 19:44]--[2016-11-24 Thu 19:45] =>  0:01
     :END:
     [2016-11-24 Thu 19:44]
**** 不如意事常八九，可与言者无二三 
     [2016-11-24 Thu 20:12]
**** 小小摘抄 
***** 当你老了，回顾一生，就会发觉：什么时候出国读书，什么时候决定做第一份职业、何时选定了对象而恋爱、什么时候结婚，其实都是命运的巨变。只是当时站在三岔路口，眼见风云千樯，你作出选择的那一日，在日记上，相当沉闷和平凡，当时还以为是生命中普通的一天。
      :LOGBOOK:
      CLOCK: [2016-11-24 Thu 20:16]--[2016-11-24 Thu 21:45] =>  1:29
      :END:
      [2016-11-24 Thu 20:16]
**** org mode 
***** org mode 果然非常吊啊，可以说吊的不行。
***** 今天还是收获蛮大的，明天晚上吧，把git搞一搞，实现同步功能，哎呀，迈向人生巅峰有木有啊
      :LOGBOOK:
      CLOCK: [2016-11-24 Thu 21:15]--[2016-11-24 Thu 21:18] =>  0:03
      :END:
      [2016-11-24 Thu 21:15]
**** 好累啊，其实还行，就是前天练的那一组腹肌撕裂者的劲儿还没缓过来，我要回去了 
     :LOGBOOK:
     CLOCK: [2016-11-24 Thu 23:12]--[2016-11-24 Thu 23:13] =>  0:01
     :END:
     [2016-11-24 Thu 23:12]
*** 2016-11-25 Friday
**** 刚到实验室，上午又荒废了，呵呵呵 
     [2016-11-25 Fri 14:42]
**** Learning Git 
***** Configuration
      #+BEGIN_SRC shell
        git config --global user.name=alexaway
        git config --global user.email=1527381991@qq.com
        git config --global core.editor=emacs
        git config --global color.ui=true
      #+END_SRC
      [[file:~/.gitconfig][my .gitconfig file]]
***** initializing a repository
      #+BEGIN_SRC shell
        git init
        git add .
        git commit -m "Initial commit"
        git log --since= --until= --author= --grep --oneline
        git status
      #+END_SRC
***** Git conception and architecture
****** tree architecture
       add -- commit
****** check the difference among files
       #+BEGIN_SRC shell
         git diff
         git diff --staged/cached                                # show diff between index and named commit
         git rm file_name
       #+END_SRC

       :LOGBOOK:
       CLOCK: [2016-11-25 Fri 20:58]--[2016-11-25 Fri 22:18] =>  1:20
       :END:
       [2016-11-25 Fri 20:58]
*** 2016-11-26 Saturday
**** Learning Git 
***** Something new
      #+BEGIN_SRC shell
        git diff --color-words file_name #only show the difference part
      #+END_SRC
***** Undo 
      #+BEGIN_SRC shell
        git checkout -- file_name                               # -- for checkout the current branch, undo the changes made in file_name
        git checkout cc84e623be713f4f9f9ee8885884 -- file_name 
        git reset HEAD file_name                                # unstage
        git commit --amend                                      #修改最后一次提交
        git revert cc85584aab858cd56e                           #创建一个新的，撤消(revert)了前期修改的提交(commit) 
        git reset 13a5dd315ee6975ddb5700ba 
      #+END_SRC
      [[http://www.cnblogs.com/kidsitcn/p/4513297.html][git reset 详解]] (C_c C_l create links in emacs)
***** ignore files
****** edit the .gitignore file in the root directory of the project, support regular expression
****** the github give some example of .gitignore [[https://github.com/github/gitignore][ligitnk]]
****** set the global ignore file
       #+BEGIN_SRC shell
         git config --global core.excludesfile ~/.whatever_you_named
       #+END_SRC
***** referencing commit
      #+BEGIN_SRC shell
        git ls-tree
      #+END_SRC
***** branching
      #+BEGIN_SRC shell
        git branch                                              # show all the branches in the local machine
        git branch branch_name                                  # create the new branch
        git checkout new_branch                                 # switch to the new_branch
        git show HEAD         
        git branch -b branch_name                               # 从当前节点建立新的branch并且switch到新的branch上
        git log --graph --oneline --decorate --all
        git diff master..new_feature --color-words              # show the difference between master and new_feature
        git diff master..new_feature^^ / master..new_feature~2  # 二者都是一个意思，比较master与new_feature的前两代祖先
        git branch --merged                                     # only list branches which are fully contained by HEAD
        git branch -m new_feature nnew_feature                  # rename the branch
        git branch -d branch_to_delete                          # delete the branch
      #+END_SRC
***** merging branch
      #+BEGIN_SRC shell
        git merge branch_name
      #+END_SRC
****** when make a conflict
       #+BEGIN_SRC shell
         git merge --aobrt
       #+END_SRC
****** merge often
***** Stashing changes 
      #+BEGIN_SRC shell
        git stash save "some comments"
        git stash list
        git stash show -p stash@\{0\}
        git stash pop  stash@\{0\}                             # remove and apply a single stashed state from the stash list
        git stash apply stash@\{0\}                            # apply the changes recorded in the stash
        git stash clear(all) / drop(one)
      #+END_SRC
      :LOGBOOK:
      CLOCK: [2016-11-26 Sat 14:57]--[2016-11-26 Sat 17:48] =>  2:51
      :END:
      [2016-11-26 Sat 14:57]
*** 2016-11-27 Sunday
**** 如果离开小惠能让她变得更好，我会怎么做？她是个傻孩子啊。 
     :LOGBOOK:
     CLOCK: [2016-11-27 Sun 00:32]--[2016-11-27 Sun 00:33] =>  0:01
     :END:
     [2016-11-27 Sun 00:32]
**** Git on remote servers
     #+BEGIN_SRC shell
       git remote                                                          # manage set of tracked repositories
       git remote add alexaway https://github.com/alexaway/visual.git      # add a remote repo
       git push -u alexaway master                                         # push the master branch to the remote repository
       git branch -r                                                       # show the remote branch
       git clone https://github.com/alexaway/visual.git       
     #+END_SRC
 
     :LOGBOOK:
     CLOCK: [2016-11-27 Sun 16:39]--[2016-11-27 Sun 17:48] =>  1:09
     :END:
     [2016-11-27 Sun 16:39]
**** Git & Github 
     #+BEGIN_SRC shell
       git push alexaway non_tracking                                # 注意这个命令将non_tracking push到alexaway这个远程git上，但是之后fetch的时候不会建立引用
       git branch -u non_tracking alexaway/non_tracking              # 关联本地non_tracking分支与远程的alexaway/non_tracking分支 -u = --set-upstream
       git push                                                      # 和第一个类似，但是同时创建引用
       git fetch                                                     # 从remte repo 同步，如果有多个remote repo，需要指定；只是同步了remote branch，本地的branch不受影响
       git merge origin/master                                       # 接着上一个命令，讲本地branch与之前的从远程同步的branch merge
       git pull                                                      # = fetch + merge 
       git push origin --delete non_tracking                         # 删除远程的non_tracking branch
       git branch -a/-r                                              # -a：显示所有分支  -r：显示远程分支
     #+END_SRC
***** fetch before you work
***** fetch before you push
***** fetch often
***** 省去登录过程：使用SSH方式登录，设置公钥私钥
      :LOGBOOK:
      CLOCK: [2016-11-27 Sun 18:54]--[2016-11-27 Sun 21:01] =>  2:07
      :END:
      [2016-11-27 Sun 18:54]
**** SSH keys 
     #+BEGIN_SRC shell
       ssh-keygen -t rsa -b 8112 -C "The birthday of my love"                  
       cat ~/.ssh/id_rsa.pub                                                   # get the public key 
       ssh-add ~/.ssh/id_rsa                                                   # add the key to the computer
     #+END_SRC
     :LOGBOOK:
     CLOCK: [2016-11-27 Sun 21:09]--[2016-11-27 Sun 21:19] =>  0:10
     :END:
     [2016-11-27 Sun 21:09]
*** 2016-11-28 Monday
**** >/dev/null 2>&1   
***** > is for redirect
***** /dev/null is a black hole where any data sent will be discarded
***** 2 is the file descriptor for standard Error
***** & is the symbol for file descriptor(without it, the following 1 would be considered a filename)
***** 1 is the file descriptor for standard Out
***** Therefore >/dev/null 2>&1 is redirect output of your program to /dev/null, include both the standard Error and standard Out

      :LOGBOOK:
      CLOCK: [2016-11-28 Mon 10:35]--[2016-11-28 Mon 10:45] =>  0:10
      :END:
      [2016-11-28 Mon 10:35]
**** linux 文件描述符 
***** linux 启动后，会默认打开三个文件描述符，分别是：标准输入standard input 0，正确输出standard output 1,错误输出error output 2
     
      :LOGBOOK:
      CLOCK: [2016-11-28 Mon 11:05]--[2016-11-28 Mon 11:10] =>  0:05
      :END:
      [2016-11-28 Mon 11:05]
**** linux 数据重定向 
***** 1> 标准输出，默认选项,1可以省略
***** 2> 错误输出
***** >> 追加
***** &[n] 代表已经存在的文件描述符，&1代表输入，&2代表输出 &-代表关闭与它绑定的描述符，2>&- 关闭错误输出信息
***** <  输入重定向 e.g. cat>catfile <<eof 注意<<eof 意思是当输入到指定的eof字符串时，停止并退出
***** exec 该命令执行之后，接下来的所有命令都支持， e.g. exec 6>&1 
**** 电影《大决战》

     :LOGBOOK:
     CLOCK: [2016-11-28 Mon 11:37]--[2016-11-28 Mon 12:06] =>  0:29
     :END:
     [2016-11-28 Mon 11:37]
**** linux command  
***** 管道命令操作符："|" 它仅能处理经由前面一个指令传出的正确输出信息，传递给下一个命令，作为标准输出
***** xargs 将参数列表转换成小块分段传递给其他命令，以避免参数列表过长的问题。-0指的是把特殊字符作为普通字符看待
***** -n $(var) ：如果不为空返回真 -z $(var) ：如果为空返回真

      :LOGBOOK:
      CLOCK: [2016-11-28 Mon 16:33]--[2016-11-28 Mon 16:34] =>  0:01
      CLOCK: [2016-11-28 Mon 16:25]--[2016-11-28 Mon 16:26] =>  0:01
      CLOCK: [2016-11-28 Mon 14:42]--[2016-11-28 Mon 14:45] =>  0:03
      :END:
      [2016-11-28 Mon 12:06]
**** linux：at 
***** at 处理那些只执行一次就结束的程序
**** Linux: crontab
***** crontab 循环性工作
***** 限制使用该服务
****** /etc/cron.allow
****** /etc/cron.deny
***** 当使用crontab 简历了工作安排之后， 工作记录会被记录到/var/spool/cron 里，而且以账号作为判别
****** -e：编辑crontab 的任务
****** -l：查阅
****** -r：移除所有crontab 任务，如若想移除一个任务，用-e来编辑
***** 具体参数  * * * * * command
      | meaning | minute | hour | date | month | week | command   |
      |---------+--------+------+------+-------+------+-----------|
      | range   |   0-59 | 0-23 | 1-31 |  1-12 |  0-7 | that's it | 
***** 特殊字符  
****** * ：任何时刻都接受
****** , ：分割时段
****** - ：一段时间范围
****** /n：每隔n单位时间
****** 这是一个测试
***** [[http://linux.vbird.org/linux_basic/0430cron.php#crontab][for details]] 

      :LOGBOOK:
      CLOCK: [2016-11-28 Mon 19:11]--[2016-11-28 Mon 19:48] =>  0:37
      CLOCK: [2016-11-28 Mon 18:36]--[2016-11-28 Mon 19:09] =>  0:33
      :END:
      [2016-11-28 Mon 18:36]
*** 2016-11-29 Tuesday
****  Finally,I am back
     :LOGBOOK:
     :END:
     [2016-11-29 Tue 20:20]
*** 2016-11-30 Wednesday
**** Test for encryption                                              :crypt:
-----BEGIN PGP MESSAGE-----
Version: GnuPG v1

jA0EBwMCOfk6/5dZQ2xg0msBWJuWlm4SZlO7OLWXK0yquYCrtsQB6gtAW83mVvUt
BLXG947DWI+KVB2C5CSPs2CVYSJS9q0XfBqOVvAqtOQ14Tapnpj4TKCUxMlzLGMN
3xXuQOHu8bubCz2amCNDjg4UrWWAVBuixxZbGg==
=OB7r
-----END PGP MESSAGE-----
**** 要开始学习了哦 
   [2016-11-30 Wed 10:04]
**** *这是加粗* /look this/ _下划线_ =这是什么=   
     :LOGBOOK:
     CLOCK: [2016-11-30 Wed 10:08]--[2016-11-30 Wed 10:11] =>  0:03
     :END:
   [2016-11-30 Wed 10:08]
